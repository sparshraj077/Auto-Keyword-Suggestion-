{"mappings":"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","sources":["app.js"],"sourcesContent":["// // Predefined list of Romanized Hindi words for suggestions\r\n// const hindiWords = [\r\n//     \"namaste\",\r\n//     \"naman\",\r\n//     \"shukriya\",\r\n//     \"dost\",\r\n//     \"pyar\",\r\n//     \"aap\",\r\n//     \"ghar\",\r\n//     \"dhanyavaad\",\r\n//     \"mujhe\",\r\n//     \"khana\",\r\n//     \"pani\",\r\n//     \"sundar\",\r\n//     \"sabzi\"\r\n// ];\r\n\r\n// // Function to handle input and show suggestions\r\n// const handleInput = (event) => {\r\n//     const inputText = event.target.value.trim();\r\n//     const suggestionsContainer = document.getElementById('suggestions');\r\n\r\n//     if (inputText.length === 0) {\r\n//         suggestionsContainer.style.display = 'none'; // Hide suggestions if input is empty\r\n//         return;\r\n//     }\r\n\r\n//     // Filter the words based on the typed input\r\n//     const matchingWords = hindiWords.filter((word) => word.startsWith(inputText.toLowerCase()));\r\n\r\n//     if (matchingWords.length === 0) {\r\n//         suggestionsContainer.style.display = 'none'; // Hide if no matches\r\n//     } else {\r\n//         suggestionsContainer.style.display = 'block'; // Show suggestions\r\n\r\n//         // Clear previous suggestions\r\n//         suggestionsContainer.innerHTML = '';\r\n\r\n//         // Display the matching words as suggestions\r\n//         matchingWords.forEach((word) => {\r\n//             const suggestionItem = document.createElement('div');\r\n//             suggestionItem.textContent = word;\r\n//             suggestionItem.classList.add('suggestion-item');\r\n//             suggestionsContainer.appendChild(suggestionItem);\r\n\r\n//             // Handle click on a suggestion\r\n//             suggestionItem.addEventListener('click', () => {\r\n//                 document.getElementById('inputText').value = word; // Set the selected word as input\r\n//                 suggestionsContainer.style.display = 'none'; // Hide suggestions\r\n//             });\r\n//         });\r\n//     }\r\n// };\r\n\r\n// // Attach the input event listener to the input field\r\n// document.getElementById('inputText').addEventListener('input', handleInput);\r\n\r\n//-----------new code stage2\r\n\r\n\r\n// const inputField = document.getElementById('inputText');\r\n// const suggestionsBox = document.getElementById('suggestions');\r\n\r\n// // Fetch suggestions from the backend based on user input\r\n// async function fetchSuggestions(query) {\r\n//     const response = await fetch(`http://localhost:3000/api/suggestions?q=${query}`);\r\n//     return response.json();\r\n// }\r\n\r\n// // Handle user input in the text field\r\n// inputField.addEventListener('input', async (event) => {\r\n//     const query = event.target.value.toLowerCase();\r\n//     if (query.length > 0) {\r\n//         const suggestions = await fetchSuggestions(query);\r\n//         displaySuggestions(suggestions);\r\n//     } else {\r\n//         displaySuggestions([]);\r\n//     }\r\n// });\r\n\r\n// // Display suggestions below the input field\r\n// function displaySuggestions(suggestions) {\r\n//     suggestionsBox.innerHTML = '';\r\n//     suggestions.forEach(suggestion => {\r\n//         const suggestionItem = document.createElement('div');\r\n//         suggestionItem.classList.add('suggestion-item');\r\n//         suggestionItem.textContent = suggestion;\r\n//         suggestionsBox.appendChild(suggestionItem);\r\n//     });\r\n// }\r\n\r\n// updated approach for stage 2------------------------------------------\r\n// document.getElementById('inputText').addEventListener('input', async function() {\r\n//     const query = this.value.trim();\r\n//     if (query.length === 0) {\r\n//         document.getElementById('suggestions').innerHTML = '';\r\n//         return;\r\n//     }\r\n\r\n//     try {\r\n//         const response = await fetch(`http://localhost:3000/api/suggestions?q=${query}`);\r\n//         const suggestions = await response.json();\r\n\r\n//         // Update the suggestion list\r\n//         const suggestionsContainer = document.getElementById('suggestions');\r\n//         suggestionsContainer.innerHTML = ''; // Clear previous suggestions\r\n\r\n//         suggestions.forEach(suggestion => {\r\n//             const div = document.createElement('div');\r\n//             div.classList.add('suggestion-item');\r\n//             div.textContent = suggestion;\r\n//             suggestionsContainer.appendChild(div);\r\n//         });\r\n//     } catch (error) {\r\n//         console.error(\"Error fetching suggestions:\", error);\r\n//     }\r\n// });\r\n\r\n//----------------------------------------------- now we will use n gram approach\r\n\r\n// document.getElementById('inputText').addEventListener('input', async function() { \r\n//     const query = this.value.trim();\r\n//     if (query.length === 0) {\r\n//         document.getElementById('suggestions').innerHTML = '';\r\n//         return;\r\n//     }\r\n\r\n//     try {\r\n//         // Make a request to the backend for word suggestions based on the current query\r\n//         const response = await fetch(`http://localhost:3000/api/suggestions?q=${query}`);\r\n//         const suggestions = await response.json();\r\n\r\n//         // Update the suggestion list\r\n//         const suggestionsContainer = document.getElementById('suggestions');\r\n//         suggestionsContainer.innerHTML = ''; // Clear previous suggestions\r\n\r\n//         suggestions.forEach(suggestion => {\r\n//             const div = document.createElement('div');\r\n//             div.classList.add('suggestion-item');\r\n//             div.textContent = suggestion;\r\n//             suggestionsContainer.appendChild(div);\r\n//         });\r\n//     } catch (error) {\r\n//         console.error(\"Error fetching suggestions:\", error);\r\n//     }\r\n// });\r\n\r\n\r\n//------------------------------------\r\n// till here the code is successfully showing the suggestions--------------------------------------------\r\n//------------------------------------\r\n\r\n\r\n//fixing and doing improvisations\r\n\r\ndocument.getElementById('inputText').addEventListener('input', handleInput);\r\n\r\nasync function handleInput() {\r\n    const query = this.value.trim();\r\n    if (query.length === 0) {\r\n        clearSuggestions();\r\n        return;\r\n    }\r\n\r\n    try {\r\n        const response = await fetch(`http://localhost:3000/api/suggestions?q=${query}`);\r\n        const suggestions = await response.json();\r\n\r\n        updateSuggestions(suggestions);\r\n    } catch (error) {\r\n        console.error(\"Error fetching suggestions:\", error);\r\n    }\r\n}\r\n\r\nfunction clearSuggestions() {\r\n    document.getElementById('suggestions').innerHTML = '';\r\n}\r\n\r\nfunction updateSuggestions(suggestions) {\r\n    const suggestionsContainer = document.getElementById('suggestions');\r\n    suggestionsContainer.innerHTML = '';\r\n\r\n    suggestions.forEach(suggestion => {\r\n        const div = document.createElement('div');\r\n        div.classList.add('suggestion-item');\r\n        div.textContent = suggestion;\r\n        div.addEventListener('click', () => {\r\n            addSuggestionToInput(suggestion);\r\n        });\r\n        suggestionsContainer.appendChild(div);\r\n    });\r\n}\r\n\r\nfunction addSuggestionToInput(suggestion) {\r\n    const inputField = document.getElementById('inputText');\r\n    const currentText = inputField.value;\r\n    const words = currentText.split(/\\s+/);\r\n    words.pop();  // Remove the last partially typed word\r\n    words.push(suggestion);  // Add the selected suggestion\r\n    inputField.value = words.join(' ') + ' ';\r\n    clearSuggestions();\r\n}\r\n"],"names":[],"version":3,"file":"index.7c0ccee6.js.map","sourceRoot":"/__parcel_source_root/"}